{"name":"Hands-on: Desenvolvimento de Frameworks - parte 1","tagline":"Estrutura, Comportamento e Extensibilidade.","body":"Neste hand-on você partirá de uma aplicação que já tem uma tela (IHM) pronta. Você simulará o desenvolvimento das demais telas da aplicação. Visando demonstrar a atividade de componentização inserida no contexto de desenvolvimento de uma aplicação, a cada nova tela você inserirá melhorias à maneira implementá-las.\r\n\r\nSiga atentamente as instruções contidas nas três seções a seguir antes de iniciar a execução dos exercícios.\r\n\r\n\r\n### Requisitos\r\n\r\n* Git\r\n* JDK 1.7.x\r\n* Maven 3.x\r\n* Eclipse Standard IDE\r\n\r\n\r\n### Preparação\r\n\r\nExecutar os seguintes passos para baixar os fontes e gerar o projeto do Eclipse.\r\n\r\n```\r\n> mkdir hands-on\r\n> cd hands-on\r\n> git clone https://github.com/br11/swing-framework_hands-on.git\r\n> cd swing-framework_hands-on\r\n> mvn eclipse:clean eclipse:eclipse\r\n```\r\nApós executar os comandos acima, importe o projeto no eclipse.\r\nCaso não queira usar Maven e Git você podera fazer o download e descompactar o arquivo .zip, criar um projeto no eclipse apontando para a pasta descompactada. No Eclipse, crie uma source folder apontando para *src/main/java*.\r\n\r\n### Execução\r\n\r\nEdite o arquivo LoadUtil.java para disponibilizar a tela que será testada.\r\nExecute a classe br.atech.workshop.bestpractices.app.Boot contida no projeto.\r\nInforme o número da tela.\r\nPreencha o campo nome e clique em um dos botões.\r\n\r\n![](https://lh5.googleusercontent.com/wHBK-j6LY40PMsCLXEi7mW_sJq5HVwL3ANRN0D9obYS9nXJ3wrlByniJ3_mhMWm5U4iL-HBXeIbm-UPwRBxiR8N_4z2kOc588TsnC8aUQ14xMe3rXGz53vQ6GM6-Xsyjsg)\r\n\r\nClique seguidas vezes até obter uma mensagem de erro. Desta forma você irá testar o tratamento de excessões.\r\n\r\n### Exercícios\r\n\r\nÉ necessários que os exercício seja executados em sequência. Durante a codificação, aproveite para explorar o código fonte e analisar as alteração que estão sendo propostas. Sempre execute a aplicação após concluir cada exercício - siga as instruções descritas na sessão Execução.\r\n\r\nExercício 1\r\nImplementar uma tela Swing.\r\n\r\nExercício 1.1\r\nImplementar a ação do botão número 2.\r\n\r\n    protected void addBtn2Listeners() {\r\n        btn2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent event) {\r\n                try {\r\n                    resultfield.setText(\"\");\r\n                    reset();\r\n                    resultfield.setText(app.feature2(namefield.getText()));\r\n                } catch (AppException e) {\r\n                    e.printStackTrace();\r\n                    print(\"System Error\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\nExercício 1.2:\r\nImplementar a ação do botão número 3.\r\n\r\n    protected void addBtn3Listeners() {\r\n        btn2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent event) {\r\n                try {\r\n                    resultfield.setText(\"\");\r\n                    reset();\r\n                    resultfield.setText(app.feature3(namefield.getText()));\r\n                } catch (AppException e) {\r\n                    e.printStackTrace();\r\n                    print(\"System Error\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\nExercício 1.3\r\nLimpar o resultado da execução anterior ao se editar o campo nome.\r\n\r\n            public void onChange(DocumentEvent e) {\r\n                resultfield.setText(\"\");\r\n                reset();\r\n            }\r\n\r\nNão se esqueça de editar o arquivo LoadUtil.java para disponibilizar a tela 1.\r\n\r\n\r\nExercício 2\r\nMelhorar o tratamento de exceção.\r\n\r\n\r\nExercício 2.1\r\nTratar as diferentes exceções.\r\n\r\n        if (err instanceof AppException) {\r\n            return \"Não foi possível processar sua requisição.\";\r\n        } else if (err instanceof RuntimeException) {\r\n            return \"Falha interna. Notifique o administrador do sistema.\";\r\n        } else {\r\n            return \"Falha de processamento.\";\r\n        }\r\n\r\n\r\nExercício 2.2\r\nInstanciar o ExceptionHandler.\r\n\r\n    private ExceptionHandler exHandler = new ExceptionHandler(this);\r\n\r\n\r\nExercício 2.3\r\nUsando o ExceptionHandler.\r\n\t\r\n            @Override\r\n            public void actionPerformed(ActionEvent event) {\r\n                try {\r\n                    reset();\r\n                    resultfield.setText(app.feature3(namefield.getText()));\r\n                } catch (AppException e) {\r\n                    exHandler.handle(e);\r\n                }\r\n            }\r\n\r\n\r\nExercício 2.4\r\nLimpar os campos ao editar o campo nome.\r\n\r\n            public void onChange(DocumentEvent e) {\r\n                reset();\r\n            }\r\n\r\n\r\nExercício 2.5\r\nImplementar toda lógica de limpeza de campos no método reset().\r\n\r\n    @Override\r\n    public void reset() {\r\n        resultfield.setText(\"\");\r\n        super.reset();\r\n    }\r\n\r\n\r\n\r\nExercício 3\r\nEliminar duplicação de código através de pequenas mudanças.\r\n\r\n\r\nExercício 3.1\r\nImplementar um ActionListener para servir de base para implementação de todas as ações de tela.\r\n\r\n    @Override\r\n    public final void actionPerformed(ActionEvent event) {\r\n        try {\r\n            gui.reset();\r\n            onAction();\r\n        } catch (AppException e) {\r\n            exHandler.handle(e);\r\n        }\r\n    }\r\n\r\n\r\n\r\nExercício 3.2\r\nImplementar a ação do botão número 3 baseada no AbstractActionListener.\r\n\r\n        btn3.addActionListener(new AbstractActionListener(this) {\r\n            /*\r\n             * (non-Javadoc)\r\n             * \r\n             * @see\r\n             * br.atech.workshop.duplicateCode.gui.Gui3.Gui3Listener#onAction()\r\n             */\r\n            @Override\r\n            protected void onAction() throws AppException {\r\n                resultfield.setText(app.feature3(namefield.getText()));\r\n            }\r\n        });\r\n\r\n\r\n\r\nExercício 3.3\r\nImplementar a ação de limpar painel de mensagens quando um campo é editado.\r\n\r\n    /**\r\n     * \r\n     * @param e\r\n     */\r\n    public void onChange(DocumentEvent e) {\r\n        gui.reset();\r\n    }\r\n\r\n\r\n\r\nExercício 3.4\r\nAplicar a ação de limpar o painel de mensagens ao campo nome.\r\n\r\n    protected void addNamefieldListeners() {\r\n        namefield.getDocument().addDocumentListener(\r\n                new DefaultDocumentListener(this));\r\n    }\r\n\r\n\r\n\r\nExercício 4\r\nImplementar um Framework de tela.\r\n\r\nExercício 4.1\r\nImplementar um comportamento padrão para todas as ações.\r\n\r\n    @Override\r\n    public void onAction(ActionEvent event) throws Exception {\r\n        getGui().reset();\r\n        super.onAction(event);\r\n    }\r\n\r\n\r\n\r\nExercício 4.2\r\nAtivar os ActionListeners ao exibir a tela. \r\n\r\n    @Override\r\n    public void show() {\r\n        actionListener.activate();\r\n        super.show();\r\n    }\r\n\r\n\r\n\r\nExercício 4.3\r\nO painel de mensagens deve ser limpo quando qualquer campo da tela é editado.\r\n\r\n    protected void anyOnChange(DocumentEvent event) throws AppException {\r\n        reset();\r\n    }\r\n\r\n\r\n\r\nExercício 4.4\r\nUsar o Framework para implementar a Gui4.\r\n\r\n    public class Gui4 extends StandardGui {\r\n\r\n\r\n\r\nExercício 4.5\r\nImplementa a ação do botão número 2.\r\n\r\n    protected void btn2OnClick(ActionEvent event) throws AppException {\r\n        resultfield.setText(app.feature2(namefield.getText()));\r\n    }\r\n\r\n\r\n\r\nExercício 4.6\r\nImplementa a ação do botão número 3.\r\n\r\n    protected void btn3OnClick(ActionEvent event) throws AppException {\r\n        resultfield.setText(app.feature3(namefield.getText()));\r\n    }\r\n\r\n\r\n\r\nExercício 4.7\r\nLimpar também o resultado da última execução.\r\n\r\n    @Override\r\n    public void reset() {\r\n        resultfield.setText(\"\");\r\n        super.reset();\r\n    }\r\n\r\n\r\n\r\nExercício 5\r\nTornar nosso Framework extensível criando facilidades para acrescentar, modificar e/ou sobrescrever os comportamentos da tela.\r\n\r\nExercício 5.1\r\nImplementa um ponto de extensão no fechamento da tela.\r\n\r\n    @Override\r\n    public void windowClosing(WindowEvent e) {\r\n        gui.hide();\r\n    }\r\n\r\n\r\nExercício 5.2\r\nHabilitando o ponto de extensão criado no exercício anterior.\r\n\r\n    public ExtensibleGui() {\r\n        getFrame().addWindowListener(new CloseListener(this));\r\n    }\r\n\r\n\r\n\r\nExercício 5.3\r\nHabilitando os pontos de extensão de abertura de tela.\r\n\r\n    @Override\r\n    public final void show() {\r\n        beforeShow();\r\n        onShow();\r\n        afterShow();\r\n    }\r\n\r\n\r\n\r\nExercício 5.4\r\nHabilitando os pontos de extensão de fechamento de tela.\r\n\r\n    @Override\r\n    public final void hide() {\r\n        beforeHide();\r\n        onHide();\r\n        afterHide();\r\n    }\r\n\r\n\r\n\r\nExercício 5.5\r\nImplementar a possíbilidade de alterar o comportamento padrão da tela.\r\n\r\n    public void setActionListener(\r\n            StandardEventListener<? extends ExtensibleGui> actionListener) {\r\n        if (this.actionListener != null) {\r\n            this.actionListener.deactivate();\r\n        }\r\n        this.actionListener = actionListener;\r\n    }\r\n\r\n\r\n\r\nExercício 5.6\r\nUsar o Framework para implementar a Gui5.\r\n\r\n    public class Gui5 extends ExtensibleGui {\r\n\r\n\r\n\r\nExercício 5.7\r\nAproveitar o ponto de extensão para customizar o comportamento da tela.\r\n\r\n    @Override\r\n    protected void afterHide() {\r\n        super.afterHide();\r\n        JOptionPane.showMessageDialog(null, \"Good bye!\");\r\n    }\r\n\r\n\r\n\r\nExercício 6\r\nNeste exercício veremos o quão complexo pode ser implementar o comportamento, mesmo que o framework dê suporte à extensão.\r\n\r\nExercício 6.1\r\nVamos aproveitar para tornar padrão o comportamento de mudar o cursor para “aguarde” ao clicar nos botões.\r\n\r\nExtendedEventListener.java\r\n\r\n    @Override\r\n    public void onAction(ActionEvent event) throws Exception {\r\n        try {\r\n            getGui().getFrame().setCursor(\r\n                    Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n            super.onAction(event);\r\n        } finally {\r\n            getGui().getFrame().setCursor(\r\n                    Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\r\n        }\r\n    }\r\n\r\n\r\n\r\nExercício 6.2\r\nToda tela deve exibir uma mensagem de despedida ao ser fechada.\r\n\r\nExtendedGui.java\r\n\r\n    @Override\r\n    protected void afterHide() {\r\n        super.afterHide();\r\n        JOptionPane.showMessageDialog(null, \"Tchau!\");\r\n    }\r\n\r\n\r\n\r\nExercício 6.3\r\nSimplificar a Implementação de confirmações.\r\n\r\nExtendedGui.java\r\n\r\n    protected boolean confirm(String message) {\r\n        return JOptionPane.showConfirmDialog(getFrame(), message,\r\n                \"Confirmação\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;\r\n    }\r\n\r\n\r\n\r\nExercício 6.4\r\nVariável necessária para controle da confirmação\r\n\r\nGui6.java\r\n\r\n    private boolean confirm = false;\r\n\r\n\r\n\r\nExercício 6.5\r\nDesabilitar o fechamento instantâneo da tela 6.\r\n\r\nGui6.java\r\n\r\n    getFrame().setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n\r\n\r\n\r\nExercício 6.6\r\nSolicitar confirmação antes de fechar a tela 6.\r\n\r\nGui6.java\r\n\r\n    protected void beforeHide() {\r\n        confirm = confirm(\"Deseja realmente encerrar?\");\r\n        if (!confirm) {\r\n            return;\r\n        }\r\n\r\n        super.beforeHide();\r\n    }\r\n\r\n\r\n\r\nExercício 6.7\r\nFechar a tela caso o usuário tenha confirmado.\r\n\r\nGui6.java\r\n\r\n    @Override\r\n    protected void onHide() {\r\n        if (!confirm) {\r\n            return;\r\n        }\r\n\r\n        super.onHide();\r\n\r\n        getFrame().dispose();\r\n    }\r\n\r\n\r\n\r\n\r\nExercício 7\r\nPara não tornar o framework uma dificuldade em vez de uma ajuda, vamos calibrá-lo para um perfeito ajuste às nossas necessidades.\r\n\r\nExercício 7.1\r\nImplemente um signal de abortar execução.\r\n\r\nAbortSignal.java\r\n\r\npublic class AbortSignal extends RuntimeException {\r\n    private static final long serialVersionUID = 1L;\r\n}\r\n\r\n\r\n\r\nExercício 7.2\r\nAo receber um signal de abortar nada é feito senão retornar imediatamente. A implementação é feita de maneira a isolar o código do resto do framework.\r\n\r\nAdvancedExceptionHandler.java\r\n\r\n    @Override\r\n    public void handle(Throwable t) {\r\n        if (t instanceof AbortSignal) {\r\n            return;\r\n        }\r\n        super.handle(t);\r\n    }\r\n\r\n\r\n\r\nExercício 7.3\r\nAplicar o novo componente à tela.\r\n\r\nAdvancedGui.java\r\n\r\n    public AdvancedGui() {\r\n        setActionListener(new ExtendedEventListener<>(this,\r\n                new AdvancedExceptionHandler(this)));\r\n    }\r\n\r\n\r\n\r\nExercício 7.4\r\nCriar um método para isolar a lógica e simplificar o reuso.\r\n\r\nAdvancedGui.java\r\n\r\n    protected void abort() {\r\n        throw new AbortSignal();\r\n    }\r\n\r\n\r\n\r\nExercício 7.5\r\nImplementar a Gui7 a partir do framework.\r\n\r\nGui7.java\r\n\r\npublic class Gui7 extends AdvancedGui {\r\n\r\n\r\n\r\nExercício 7.6\r\nSolicitar confirmação antes de fechar a tela 7.\r\n\r\nGui7.java\r\n\r\n    @Override\r\n    protected void beforeHide() {\r\n        if (!confirm(\"Deseja realmente encerrar?\")) {\r\n            abort();\r\n        }\r\n\r\n        super.beforeHide();\r\n    }\r\n\r\n\r\n\r\n\r\nExercício 8\r\nNeste exercício iremos tornar padrão a todos comportamentos que viemos implementando ao longo o tempo nas diferentes telas.Assim todas os botões deverão mudar o cursor para “aguarde” durante o processamento; toda tela deve solicitar confirmação de fechamento e exibir mensagem de despedida.\r\n\r\n\r\nExercício 8.1\r\nVamos calibrar o framework para encarar esse novo desafio. Para tal vamos preparemos uma matriz para facilitar a implementação das novas telas.\r\n\r\nSimpleGui.java\r\n\r\n    @Override\r\n    protected void beforeHide() {\r\n        if (!confirm(\"Deseja realmente encerrar?\")) {\r\n            abort();\r\n        }\r\n        super.beforeHide();\r\n    }\r\n\r\n\r\n\r\nExercício 8.2\r\nImplementar a tela 8 no novo padrão de comportamento.\r\n\r\nGui8.java\r\n\r\n    @Override\r\n    public void reset() {\r\n        resultfield.setText(\"\");\r\n        super.reset();\r\n    }\r\n\r\n\r\nExercício 8.3\r\nAgora traremos as telas pré-existentes para o novo padrão.\r\n\r\nGui4.java\r\n\r\npublic class Gui4 extends SimpleGui {\r\n\r\n\r\nVeja os arquivos Gui4a.java e Gui1a.java para comparar a solução componentizada e a solução brute-force.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}